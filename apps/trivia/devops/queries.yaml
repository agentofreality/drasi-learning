# Copyright 2024 The Drasi Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: ContinuousQuery
apiVersion: v1
name: player-scores
spec:
  mode: query
  sources:    
    subscriptions:
      - id: questions
        nodes:
          - sourceLabel: Question
      - id: games
        nodes:
          - sourceLabel: Answer
          - sourceLabel: Player
          - sourceLabel: Team
        relations:
          - sourceLabel: ANSWER_FROM
          - sourceLabel: MEMBER_OF
    joins:
      - id: ANSWER_TO
        keys:
          - label: Question
            property: id
          - label: Answer
            property: questionId
  query: >
      MATCH
          (a:Answer)-[:ANSWER_FROM]->(p:Player)-[:MEMBER_OF]->(t:Team),
          (a:Answer)-[:ANSWER_TO]->(q:Question)
      RETURN
          p.name AS PlayerName,
          t.name AS TeamName,
          avg(a.duration) as AverageDuration,
          count(
            CASE 
              WHEN a.answer = q.answer AND NOT a.skipped THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsCorrect,
          count(
            CASE 
              WHEN a.answer <> q.answer AND NOT a.skipped THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsIncorrect,
          count(
            CASE a.skipped 
              WHEN TRUE THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsSkipped     
---
kind: ContinuousQuery
apiVersion: v1
name: team-scores
spec:
  mode: query
  sources:    
    subscriptions:
      - id: questions
        nodes:
          - sourceLabel: Question
          - sourceLabel: Category
      - id: games
        nodes:
          - sourceLabel: Answer
          - sourceLabel: Player
          - sourceLabel: Team
        relations:
          - sourceLabel: ANSWER_FROM
          - sourceLabel: MEMBER_OF
    joins:
      - id: ANSWER_TO
        keys:
          - label: Question
            property: id
          - label: Answer
            property: questionId
      - id: FROM_CATEGORY
        keys:
          - label: Category
            property: id
          - label: Question
            property: cat_id
  query: >
      MATCH
          (a:Answer)-[:ANSWER_FROM]->(p:Player)-[:MEMBER_OF]->(t:Team),
          (a:Answer)-[:ANSWER_TO]->(q:Question)-[:FROM_CATEGORY]->(c:Category)
      RETURN
          t.name AS TeamName,
          c.name AS CategoryName,
          avg(a.duration) as AverageDuration,
          count(
            CASE 
              WHEN a.answer = q.answer AND NOT a.skipped THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsCorrect,
          count(
            CASE 
              WHEN a.answer <> q.answer AND NOT a.skipped THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsIncorrect,
          count(
            CASE a.skipped 
              WHEN TRUE THEN 1 
              ELSE NULL 
            END 
          ) AS QuestionsSkipped      
---
kind: ContinuousQuery
apiVersion: v1
name: inactive-players
spec:
  mode: query
  sources:    
    subscriptions:
      - id: games
  query: >
      MATCH
          (a:Answer)-[:ANSWER_FROM]->(p:Player)-[:MEMBER_OF]->(t:Team)
      WITH
          p,
          t,
          max(datetime({ epochMillis: a.time })) AS InactiveSince
      WHERE
          InactiveSince <= datetime.realtime() - duration({ seconds: 30 })
      OR
          drasi.trueLater(InactiveSince <= datetime.realtime() - duration({ seconds: 30 }), InactiveSince + duration({ seconds: 30 }))
      RETURN
          p.name AS PlayerName,
          t.name AS TeamName,
          InactiveSince
---
kind: ContinuousQuery
apiVersion: v1
name: players-to-evict
spec:
  mode: query
  sources:    
    subscriptions:
      - id: games
  query: >
      MATCH
          (a:Answer)-[:ANSWER_FROM]->(p:Player)
      WITH
          elementId(p) AS PlayerId,
          max(datetime({ epochMillis: a.time })) AS InactiveSince
      WHERE
          InactiveSince <= datetime.realtime() - duration({ seconds: 300 })
      OR
          drasi.trueLater(InactiveSince <= datetime.realtime() - duration({ seconds: 300 }), InactiveSince + duration({ seconds: 300 }))
      RETURN
          PlayerId


